pipeline {
    agent any
    tools {
        maven 'maven3'
        jdk 'jdk17'
    }
    environment {
        SCANNER_HOME= tool 'sonarqube'
        IMAGE_TAG="v${BUILD_NUMBER}"
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/parthshah0210/springbootapp.git'
            }
        }
        stage('compile') {
            steps {
                    sh 'mvn clean compile'
                }
            }
        stage('trivy file scan') {
            steps {
                sh 'trivy fs --format table -o filescan.html .'
            }
        }
        stage('sonarqube scanner') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=springboot -Dsonar.projectKey=springboot \
                            -Dsonar.java.binaries=target '''
                }
            }
        }
        stage('build') {
            steps {
                sh 'mvn install'
            }
        }
        stage('deploy') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-file', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        stage('docker build and tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh 'docker build -t parthu210/springbootapp:$IMAGE_TAG .'
                    }
                }
            }
        }
        stage('trivy image scan') {
            steps {
                sh 'trivy image --format table -o image-scan.html parthu210/springbootapp:$IMAGE_TAG'
            }
        }
        stage('push image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh 'docker push parthu210/springbootapp:$IMAGE_TAG'
                    }
                }
            }
        }
        stage('update menifestfile') {
            steps {
                script {
                    cleanWs()
                    withCredentials([usernamePassword(credentialsId: 'github-cred', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh '''
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/springbootapp-CD.git
                            cd springbootapp-CD 
                            sed -i "s|parthu210/springbootapp:.*|parthu210/springbootapp:${IMAGE_TAG}|" deployment.yml
                            git config user.name "${GIT_USERNAME}"
                            git config user.email "parrthshaah@gmail.com"
                            git add deployment.yml
                            git commit -m "updated image tag to ${IMAGE_TAG}"
                            git push origin main
                        '''
                    }    
                }
            }
        }
    }
}
